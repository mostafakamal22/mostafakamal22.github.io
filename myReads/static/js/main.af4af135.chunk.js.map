{"version":3,"sources":["BooksShelf.js","BooksAPI.js","searchPage.js","App.js","index.js"],"names":["BooksShelf","props","react_default","a","createElement","className","books","map","book","key","id","style","width","height","backgroundImage","concat","undefined","imageLinks","thumbnail","defaultValue","onChange","event","update","target","value","disabled","title","Array","isArray","authors","join","api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","getAll","fetch","then","res","json","data","shelf","method","Object","objectSpread","Content-Type","body","JSON","stringify","search","query","SearchPage","state","searchedBooks","handleChange","_callee","regenerator_default","wrap","_context","prev","next","_this","setState","BooksAPI","sent","stop","this","matchingShelves","bookSearchResult","allbooks","toConsumableArray","read","currentlyReading","wantToRead","bookId","findBook","find","b","_this2","react_router_dom","to","type","placeholder","error","length","Component","BooksApp","getbooks","allBooks","readBooks","wantToReadBooks","currentlyReadingBooks","parse","filter","updateBookShelf","_callee2","_context2","react_router","exact","path","searchPage_SearchPage","render","React","ReactDOM","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.af4af135.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function BooksShelf(props) {\r\n    return (\r\n        <ol className=\"books-grid\">\r\n                {props.books.map((book)=>(\r\n                        <li  key={book.id}>\r\n                            <div className=\"book\">\r\n                                <div className=\"book-top\">\r\n                                    <div className=\"book-cover\" style={{ width: 128, height: 193, backgroundImage: `url(${book.imageLinks!==undefined ?book.imageLinks.thumbnail:\"\"})` }}></div>\r\n                                    <div className=\"book-shelf-changer\">\r\n                                    <select \r\n                                    defaultValue={(typeof props.defaultValue ===\"function\")? (props.defaultValue(book)) : (props.defaultValue)} \r\n                                    onChange={(event)=> props.update({id:book.id}, event.target.value)} \r\n                                    >\r\n                                        <option value=\"move\" disabled>Move to...</option>\r\n                                        <option value=\"currentlyReading\">Currently Reading</option>\r\n                                        <option value=\"wantToRead\">Want to Read</option>\r\n                                        <option value=\"read\" >Read</option>\r\n                                        <option value=\"none\" >None</option>\r\n                                    </select>\r\n                                    </div>\r\n                                </div>\r\n                            <div className=\"book-title\"> {book.title} </div>\r\n                            <div className=\"book-authors\">\r\n                                { Array.isArray(book.authors)===true \r\n                                ?book.authors.join(\",\\n\")\r\n                                :book.authors\r\n                                }\r\n                            </div>\r\n                            </div>\r\n                        </li>\r\n                    ))\r\n                }   \r\n             </ol>\r\n    )\r\n}\r\n\r\n","\r\nconst api = \"https://reactnd-books-api.udacity.com\"\r\n\r\n\r\n// Generate a unique token for storing your bookshelf data on the backend server.\r\nlet token = localStorage.token\r\nif (!token)\r\n  token = localStorage.token = Math.random().toString(36).substr(-8)\r\n\r\nconst headers = {\r\n  'Accept': 'application/json',\r\n  'Authorization': token\r\n}\r\n\r\nexport const get = (bookId) =>\r\n  fetch(`${api}/books/${bookId}`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.book)\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/books`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.books)\r\n\r\nexport const update = (book, shelf) =>\r\n  fetch(`${api}/books/${book.id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ shelf })\r\n  }).then(res => res.json())\r\n\r\nexport const search = (query) =>\r\n  fetch(`${api}/search`, {\r\n    method: 'POST',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ query })\r\n  }).then(res => res.json())\r\n    .then(data => data.books)\r\n","import React, { Component } from 'react'\r\nimport BooksShelf from './BooksShelf'\r\nimport { Link } from 'react-router-dom'\r\nimport * as BooksAPI from './BooksAPI'\r\n\r\nexport default class SearchPage extends Component {\r\n  state={\r\n    query:\"\",\r\n    searchedBooks:[]\r\n  }\r\n  //handling search query change\r\n  handleChange = async(query)=> {\r\n    this.setState({\r\n      query:query\r\n    })\r\n    const searchedBooks = await BooksAPI.search(query);\r\n    this.setState({\r\n      searchedBooks:searchedBooks\r\n    })\r\n  }\r\n  //matching the shelves of both (search and home pages) by comparing the Ids of books \r\n  matchingShelves = (bookSearchResult)=> {\r\n    const allbooks=[\r\n      ...this.props.data.read,\r\n      ...this.props.data.currentlyReading,\r\n      ...this.props.data.wantToRead\r\n    ]\r\n    const bookId = bookSearchResult.id\r\n    const findBook =allbooks.find(b=> b.id===bookId)\r\n    if(findBook!==undefined){\r\n      bookSearchResult.shelf= findBook.shelf\r\n      return findBook.shelf\r\n    }\r\n    else{\r\n      return \"none\"\r\n    }\r\n  }\r\n    render() {\r\n        return (\r\n            <div className=\"search-books\">\r\n            <div className=\"search-books-bar\">\r\n              <Link to=\"/myReads\" className=\"close-search\"  >Close</Link>\r\n              <div className=\"search-books-input-wrapper\">\r\n                <input \r\n                  type=\"text\" \r\n                  placeholder=\"Search by title or author\"\r\n                  value={this.state.query} \r\n                  onChange={(event)=> this.handleChange(event.target.value)}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"search-books-results\">\r\n              {\r\n              (typeof this.state.searchedBooks === \"undefined\" || this.state.searchedBooks.error === \"empty query\")? \r\n               (<div>\r\n                 {this.state.query !== \"\"  ? <div className=\"not-found\" >Book Or Auther Not Found</div> : <div></div>} \r\n                </div>\r\n                )\r\n               :(this.state.searchedBooks.length !== 0  && this.state.query!==\"\"?\r\n                  (\r\n                    <BooksShelf \r\n                    books={this.state.searchedBooks}\r\n                    defaultValue={this.matchingShelves} \r\n                    update={this.props.update} \r\n                    /> \r\n                  ):(\r\n                      <div></div>\r\n                    )\r\n                  )\r\n                }   \r\n            </div>\r\n          </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport BooksShelf from './BooksShelf';\r\nimport SearchPage from './searchPage';\r\nimport * as BooksAPI from './BooksAPI'\r\nimport './App.css'\r\nimport { Route } from 'react-router-dom';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass BooksApp extends React.Component {\r\n  state = {\r\n    currentlyReading :[],\r\n    wantToRead:[],\r\n    read:[],\r\n  }\r\n  //invokes getbooks method when the app renders\r\n  componentDidMount(){\r\n    this.getbooks();\r\n  }\r\n  //get myStored books in the backend server \r\n  getbooks = async ()=> {\r\n    const data = await BooksAPI.getAll();\r\n    const res = JSON.stringify(data);\r\n    const allBooks = JSON.parse(res);\r\n    const readBooks = allBooks.filter(book => book.shelf === \"read\")\r\n    const wantToReadBooks = allBooks.filter(book => book.shelf === \"wantToRead\")\r\n    const currentlyReadingBooks = allBooks.filter(book => book.shelf === \"currentlyReading\")\r\n    this.setState({\r\n      currentlyReading: currentlyReadingBooks,\r\n      wantToRead:wantToReadBooks,\r\n      read:readBooks\r\n    })\r\n  }\r\n\r\n  //update my books' shelves in the backend\r\n  updateBookShelf = async (bookId,shelf)=> {\r\n    await BooksAPI.update(bookId,shelf);\r\n    this.getbooks()\r\n}\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <Route exact path=\"/myReads/search\" >\r\n          <SearchPage data={this.state} update={this.updateBookShelf} />\r\n        </Route>\r\n        <Route exact path=\"/myReads\" render= {()=> (\r\n          <div className=\"list-books\">\r\n          <div className=\"list-books-title\">\r\n            <h1>MyReads</h1>\r\n          </div>\r\n          <div className=\"list-books-content\">\r\n            <div>\r\n              <div className=\"bookshelf\">\r\n                <h2 className=\"bookshelf-title\">Currently Reading</h2>\r\n                <div className=\"bookshelf-books\">\r\n                  <BooksShelf \r\n                  books={this.state.currentlyReading}\r\n                  defaultValue=\"currentlyReading\" \r\n                  update={ this.updateBookShelf} \r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"bookshelf\">\r\n                <h2 className=\"bookshelf-title\">Want to Read</h2>\r\n                <div className=\"bookshelf-books\">\r\n                  <BooksShelf \r\n                  books={this.state.wantToRead}\r\n                  defaultValue=\"wantToRead\" \r\n                  update={ this.updateBookShelf} \r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"bookshelf\">\r\n                <h2 className=\"bookshelf-title\">Read</h2>\r\n                <div className=\"bookshelf-books\">\r\n                  <BooksShelf \r\n                  books={this.state.read}\r\n                  defaultValue=\"read\" \r\n                  update={ this.updateBookShelf} \r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"open-search\">\r\n            <Link className=\"open-search-button\" to=\"/myReads/search\" >Add a book</Link>\r\n          </div>\r\n        </div>\r\n        )}/>\r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default BooksApp\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport App from './App'\r\nimport './index.css'\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <App />\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n )\r\n"],"sourceRoot":""}